#!/usr/bin/env python

import rospy
from turtlesim.msg import Pose
from std_srvs.srv import Empty
from turtlesim.srv import TeleportAbsolute, SetPen, Spawn
import math
from turtle_control.msg import TurtleVelocity
from turtle_control.srv import Start

waypoints = rospy.get_param("/waypoints")

class Follow:
    # service to call the draw service from setup node and moves the turtle by waypoints
    def __init__(self):
        self.__draw = rospy.ServiceProxy("draw", Empty)
        self.__teleport = rospy.ServiceProxy("turtle1/teleport_absolute", TeleportAbsolute)
        self.__spawn = rospy.ServiceProxy("/spawn", Spawn)
        self.__reset_turtle = rospy.ServiceProxy("reset", Empty)
        self.__set_pen = rospy.ServiceProxy("turtle1/set_pen", SetPen)
        self.__service = rospy.Service("restart", Start,self.distance)
        self.__dist_thresh = 0.05
        rospy.set_param("~dist_thresh", self.__dist_thresh)
        rospy.Subscriber("turtle1/pose", Pose, self.callback)
        self.pub = rospy.Publisher("turtle_cmd", TurtleVelocity, queue_size=10)
        self.iteration_number = 0
        self.flag = 0

    def callback(self, data):
        #rospy.loginfo(f"x: {data.x}, y: {data.y}")
        self.turtle_position = data
        if self.flag == 1:
            self.please_move()


    def distance(self, position):
        # function to check if turtle is within the bounds and compute distance
        x_position = position.x
        y_position = position.y
        if x_position > 10 or x_position < 0 or y_position > 10 or y_position < 0:
            return None
        self.__draw()
        self.__set_pen(off=1)
        self.__teleport(x_position, y_position, 0)
        self.__set_pen(r=255, g=255, b=255, off=0)
        distances = []
        a = (self.turtle_position.x, self.turtle_position.y)
        self.flag = 1
        for i in waypoints:
            b = i
            distance = math.dist(a, b)
            distances.append(distance)
            a = i
            #print(distances)
        self.total_distance = sum(distances) 
        return self.total_distance

    def iterations(self):
        if self.iteration_number == len(waypoints)-1:
            self.iteration_number = 0
        else:
            self.iteration_number += 1

    def please_move(self):
        # function to make the turtle move
        distance_points = waypoints[self.iteration_number]
        dx = distance_points[0] - self.turtle_position.x
        dy = distance_points[1] - self.turtle_position.y
        theta = math.atan2(dy,dx)
        theta_a = theta + 0.02
        theta_b = theta - 0.02
        if self.turtle_position.theta > theta_a:
            self.pub.publish(0, -2)
        elif self.turtle_position.theta < theta_b:
            self.pub.publish(0, 2)
        elif self.turtle_position.theta < theta_a and self.turtle_position.theta > theta_b:
            movement = TurtleVelocity(3,0)
            rospy.logdebug(f"Publish movement: {theta, dx, dy, self.turtle_position.x, self.turtle_position.y, self.turtle_position.theta, movement}")
            self.pub.publish(movement)
            threshold = math.dist([self.turtle_position.x, self.turtle_position.y], waypoints[self.iteration_number])
            #print(threshold)
            if threshold < self.__dist_thresh:
                self.iterations()

if __name__ == "__main__":
        rospy.init_node("follow", log_level=rospy.DEBUG)
        node = Follow()
        rospy.spin()
        


