#!/usr/bin/env python

import rospy
from turtlesim.msg import Pose
from std_srvs.srv import Empty, EmptyResponse
from turtlesim.srv import TeleportAbsolute, SetPen, Spawn

import math
from turtle_control.srv import Start

waypoints = rospy.get_param("/waypoints")
#rospy.set_param(_dist_thresh)
_dist_thresh = 1

      

class Follow:
    # service to call the draw service from setup node and moves the turtle by waypoints
    def __init__(self):
        self.__draw = rospy.ServiceProxy("draw", Empty)
        self.__teleport = rospy.ServiceProxy("turtle1/teleport_absolute", TeleportAbsolute)
        self.__spawn = rospy.ServiceProxy("/spawn", Spawn)
        self.__reset_turtle = rospy.ServiceProxy("reset", Empty)
        self.__set_pen = rospy.ServiceProxy("turtle1/set_pen", SetPen)



        self.__service = rospy.Service("restart", Start,self.distance)
        self.turtle_position = None

        rospy.Subscriber("turtle1/pose", Pose, self.callback)
        #rospy.Publisher()

        

    def callback(self, data):
        #rospy.loginfo(f"x: {data.x}, y: {data.y}")
        self.turtle_position = data

    def distance(self, bounds):
        # function to check if turtle is within the bounds and computer distance
        x_position = bounds.x
        y_position = bounds.y
        if x_position > 10 or x_position < 0 or y_position > 10 or y_position < 0:
            return None
        else:
            self.__draw()
            self.__set_pen(off=1)
            self.__teleport(x_position, y_position, 0)
            a = (self.turtle_position.x, self.turtle_position.y)
            b = waypoints[0]
            distance = math.dist(a, b)
            return distance

      



if __name__ == "__main__":
        rospy.init_node("follow")
        node = Follow()
        rospy.spin()


