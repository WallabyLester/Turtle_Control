#!/usr/bin/env python

'''What topics are published, their type, and what they do.
What topics are subscribed to, their type, and what the data is used for.
What services are offered, their type, and what they do
What parameters are used, their type, and what they do.'''

import rospy
#from geometry_msgs import Twist, Vector3
from turtlesim.srv import TeleportAbsolute, SetPen
from std_srvs.srv import Empty, EmptyResponse
import numpy as np

waypoints = rospy.get_param("/waypoints")
line_value = 0.1

'''A brief description of what the class or function does
What the arguments are
What the return value is
What exceptions may be raised'''

class Draw:
    # service to reset turtlesim and draw waypoints
    def __init__(self):
        self.__reset_turtle = rospy.ServiceProxy("reset", Empty)
        self.__teleport = rospy.ServiceProxy("turtle1/teleport_absolute", TeleportAbsolute)
        self.__set_pen = rospy.ServiceProxy("turtle1/set_pen", SetPen)
        self.__service = rospy.Service("draw", Empty, self.actions)

    def actions(self,req):
        self.__reset_turtle()
        for i in waypoints:
            self.__set_pen(off=1)
            self.__teleport(i[0]-line_value,i[1]-line_value,0)
            self.__set_pen(off=0)
            self.__teleport(i[0]+line_value,i[1]+line_value,0)
            self.__set_pen(off=1)
            self.__teleport(i[0]-line_value,i[1]+line_value,0)
            self.__set_pen(off=0)
            self.__teleport(i[0]+line_value,i[1]-line_value,0)
            #self.__set_pen(off=1)
            #self.__teleport(0,0,0)
            #self.__vel_msg = Twist(Vector3(1,0,0), Vector3(0,0,0))
        return EmptyResponse()

if __name__ == '__main__':
    rospy.init_node("setup")
    node = Draw()
    rospy.spin()
