#!/usr/bin/env python

"""
Uses various services to move a turtle according to waypoints and draw x's on those waypoints.

SERVICES:
    + /draw (std_srvs/Empty) ~ custom service which calls function to move turtle and draws waypoints 
    + /reset (std_srvs/Empty) ~ resets position of the turtle
    + /turtle1/teleport_absolute (turtlesim/TeleportAbsolute) ~ teleports turtle to given position
    + /turtle1/set_pen (turtlesim/SetPen) ~ sets turtle pen on or off

PARAMETERS:
    + /waypoints ~ list of points for the turtle to follow 

"""
import rospy
from turtlesim.srv import TeleportAbsolute, SetPen
from std_srvs.srv import Empty, EmptyResponse
import numpy as np

waypoints = rospy.get_param("/waypoints")
line_value = 0.1

class Draw:
    """ Uses waypoints from waypoints.yaml and moves the turtle with turtlesim services to draw x's on said waypoints
    """
    def __init__(self):
        self.__reset_turtle = rospy.ServiceProxy("reset", Empty)
        self.__teleport = rospy.ServiceProxy("turtle1/teleport_absolute", TeleportAbsolute)
        self.__set_pen = rospy.ServiceProxy("turtle1/set_pen", SetPen)
        self.__service = rospy.Service("draw", Empty, self.actions)

    def actions(self,req):
        """ Actions function for the /draw service 

        Sets turtle pen on or off and teleports to new locations 

        Args: 
            /waypoints : the desired x, y positions for the turtle

        Returns:
            EmptyResponse : gives an empty value, only result is the lines drawn by turtle
        
        """
        self.__reset_turtle()
        for i in waypoints:
            self.__set_pen(off=1)
            self.__teleport(i[0]-line_value,i[1]-line_value,0)
            self.__set_pen(off=0)
            self.__teleport(i[0]+line_value,i[1]+line_value,0)
            self.__set_pen(off=1)
            self.__teleport(i[0]-line_value,i[1]+line_value,0)
            self.__set_pen(off=0)
            self.__teleport(i[0]+line_value,i[1]-line_value,0)
        return EmptyResponse()

if __name__ == '__main__':
    rospy.init_node("setup")
    node = Draw()
    rospy.spin()
