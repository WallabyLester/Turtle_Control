#!/usr/bin/env python

import rospy
#from geometry_msgs import Twist, Vector3
from turtlesim.srv import TeleportAbsolute, SetPen
from std_srvs.srv import Empty, EmptyResponse
import numpy as np

waypoints = [[4,4],[2,2],[5,7],[7,2],[7,6]]
line_value = 0.2

class Draw:
    # service to reset turtlesim and draw waypoints
    def __init__(self):
        self.__reset_turtle = rospy.ServiceProxy("reset", Empty)
        self.__teleport = rospy.ServiceProxy("turtle1/teleport_absolute", TeleportAbsolute)
        self.__set_pen = rospy.ServiceProxy("turtle1/set_pen", SetPen)
        self.__service = rospy.Service("draw", Empty, self.actions)

    def actions(self,req):
        self.__reset_turtle()
        for i in waypoints:
            self.__set_pen(off=1)
            self.__teleport(i[0]-line_value,i[1]-line_value,0)
            self.__set_pen(off=0)
            self.__teleport(i[0]+line_value,i[1]+line_value,0)
            self.__set_pen(off=1)
            self.__teleport(i[0]-line_value,i[1]+line_value,0)
            self.__set_pen(off=0)
            self.__teleport(i[0]+line_value,i[1]-line_value,0)
            self.__set_pen(off=1)
            self.__teleport(0,0,0)
            #self.__vel_msg = Twist(Vector3(1,0,0), Vector3(0,0,0))
        return EmptyResponse()

if __name__ == '__main__':
    rospy.init_node("setup")
    node = Draw()
    rospy.spin()
